// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: snake.proto

package game_system

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GameSystem_StartGame_FullMethodName   = "/game.pb.game_system/StartGame"
	GameSystem_SetNextStep_FullMethodName = "/game.pb.game_system/SetNextStep"
)

// GameSystemClient is the client API for GameSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameSystemClient interface {
	StartGame(ctx context.Context, in *StartGameReq, opts ...grpc.CallOption) (*StartGameResp, error)
	// 他做两件事，
	// 1. 匹配成功之后，创建地图，把创建成功的地图返回来
	// 2. 传递下一步应该是什么
	SetNextStep(ctx context.Context, in *SetNextStepReq, opts ...grpc.CallOption) (*SetNextStepResp, error)
}

type gameSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewGameSystemClient(cc grpc.ClientConnInterface) GameSystemClient {
	return &gameSystemClient{cc}
}

func (c *gameSystemClient) StartGame(ctx context.Context, in *StartGameReq, opts ...grpc.CallOption) (*StartGameResp, error) {
	out := new(StartGameResp)
	err := c.cc.Invoke(ctx, GameSystem_StartGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameSystemClient) SetNextStep(ctx context.Context, in *SetNextStepReq, opts ...grpc.CallOption) (*SetNextStepResp, error) {
	out := new(SetNextStepResp)
	err := c.cc.Invoke(ctx, GameSystem_SetNextStep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameSystemServer is the server API for GameSystem service.
// All implementations must embed UnimplementedGameSystemServer
// for forward compatibility
type GameSystemServer interface {
	StartGame(context.Context, *StartGameReq) (*StartGameResp, error)
	// 他做两件事，
	// 1. 匹配成功之后，创建地图，把创建成功的地图返回来
	// 2. 传递下一步应该是什么
	SetNextStep(context.Context, *SetNextStepReq) (*SetNextStepResp, error)
	mustEmbedUnimplementedGameSystemServer()
}

// UnimplementedGameSystemServer must be embedded to have forward compatible implementations.
type UnimplementedGameSystemServer struct {
}

func (UnimplementedGameSystemServer) StartGame(context.Context, *StartGameReq) (*StartGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedGameSystemServer) SetNextStep(context.Context, *SetNextStepReq) (*SetNextStepResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextStep not implemented")
}
func (UnimplementedGameSystemServer) mustEmbedUnimplementedGameSystemServer() {}

// UnsafeGameSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameSystemServer will
// result in compilation errors.
type UnsafeGameSystemServer interface {
	mustEmbedUnimplementedGameSystemServer()
}

func RegisterGameSystemServer(s grpc.ServiceRegistrar, srv GameSystemServer) {
	s.RegisterService(&GameSystem_ServiceDesc, srv)
}

func _GameSystem_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameSystemServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameSystem_StartGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameSystemServer).StartGame(ctx, req.(*StartGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameSystem_SetNextStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNextStepReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameSystemServer).SetNextStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameSystem_SetNextStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameSystemServer).SetNextStep(ctx, req.(*SetNextStepReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GameSystem_ServiceDesc is the grpc.ServiceDesc for GameSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.pb.game_system",
	HandlerType: (*GameSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartGame",
			Handler:    _GameSystem_StartGame_Handler,
		},
		{
			MethodName: "SetNextStep",
			Handler:    _GameSystem_SetNextStep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snake.proto",
}
