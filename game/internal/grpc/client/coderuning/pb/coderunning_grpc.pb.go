// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: coderunning.proto

package coderuning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CodeRun_AddBot_FullMethodName = "/coderuning.pb.code_run/AddBot"
)

// CodeRunClient is the client API for CodeRun service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodeRunClient interface {
	AddBot(ctx context.Context, in *AddBotReq, opts ...grpc.CallOption) (*AddBotResp, error)
}

type codeRunClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeRunClient(cc grpc.ClientConnInterface) CodeRunClient {
	return &codeRunClient{cc}
}

func (c *codeRunClient) AddBot(ctx context.Context, in *AddBotReq, opts ...grpc.CallOption) (*AddBotResp, error) {
	out := new(AddBotResp)
	err := c.cc.Invoke(ctx, CodeRun_AddBot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeRunServer is the server API for CodeRun service.
// All implementations must embed UnimplementedCodeRunServer
// for forward compatibility
type CodeRunServer interface {
	AddBot(context.Context, *AddBotReq) (*AddBotResp, error)
	mustEmbedUnimplementedCodeRunServer()
}

// UnimplementedCodeRunServer must be embedded to have forward compatible implementations.
type UnimplementedCodeRunServer struct {
}

func (UnimplementedCodeRunServer) AddBot(context.Context, *AddBotReq) (*AddBotResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBot not implemented")
}
func (UnimplementedCodeRunServer) mustEmbedUnimplementedCodeRunServer() {}

// UnsafeCodeRunServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeRunServer will
// result in compilation errors.
type UnsafeCodeRunServer interface {
	mustEmbedUnimplementedCodeRunServer()
}

func RegisterCodeRunServer(s grpc.ServiceRegistrar, srv CodeRunServer) {
	s.RegisterService(&CodeRun_ServiceDesc, srv)
}

func _CodeRun_AddBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeRunServer).AddBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeRun_AddBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeRunServer).AddBot(ctx, req.(*AddBotReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CodeRun_ServiceDesc is the grpc.ServiceDesc for CodeRun service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodeRun_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coderuning.pb.code_run",
	HandlerType: (*CodeRunServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBot",
			Handler:    _CodeRun_AddBot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coderunning.proto",
}
