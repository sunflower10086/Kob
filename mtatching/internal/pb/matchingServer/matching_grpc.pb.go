// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: matching.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MatchingSystem_AddUser_FullMethodName = "/kob.matching.matching_system/AddUser"
	MatchingSystem_Remove_FullMethodName  = "/kob.matching.matching_system/Remove"
)

// MatchingSystemClient is the client API for MatchingSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchingSystemClient interface {
	// 在匹配池中添加玩家
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	// 在匹配池中删除玩家
	Remove(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
}

type matchingSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchingSystemClient(cc grpc.ClientConnInterface) MatchingSystemClient {
	return &matchingSystemClient{cc}
}

func (c *matchingSystemClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MatchingSystem_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingSystemClient) Remove(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MatchingSystem_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchingSystemServer is the server API for MatchingSystem service.
// All implementations must embed UnimplementedMatchingSystemServer
// for forward compatibility
type MatchingSystemServer interface {
	// 在匹配池中添加玩家
	AddUser(context.Context, *User) (*Response, error)
	// 在匹配池中删除玩家
	Remove(context.Context, *User) (*Response, error)
	mustEmbedUnimplementedMatchingSystemServer()
}

// UnimplementedMatchingSystemServer must be embedded to have forward compatible implementations.
type UnimplementedMatchingSystemServer struct {
}

func (UnimplementedMatchingSystemServer) AddUser(context.Context, *User) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedMatchingSystemServer) Remove(context.Context, *User) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedMatchingSystemServer) mustEmbedUnimplementedMatchingSystemServer() {}

// UnsafeMatchingSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchingSystemServer will
// result in compilation errors.
type UnsafeMatchingSystemServer interface {
	mustEmbedUnimplementedMatchingSystemServer()
}

func RegisterMatchingSystemServer(s grpc.ServiceRegistrar, srv MatchingSystemServer) {
	s.RegisterService(&MatchingSystem_ServiceDesc, srv)
}

func _MatchingSystem_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingSystemServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingSystem_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingSystemServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingSystem_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingSystemServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingSystem_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingSystemServer).Remove(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchingSystem_ServiceDesc is the grpc.ServiceDesc for MatchingSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchingSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kob.matching.matching_system",
	HandlerType: (*MatchingSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _MatchingSystem_AddUser_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _MatchingSystem_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matching.proto",
}
